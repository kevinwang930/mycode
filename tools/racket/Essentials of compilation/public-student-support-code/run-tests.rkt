#! /usr/bin/env racket
#lang racket

(require "utilities.rkt")
(require "interp-R0.rkt")
(require "interp-R1.rkt")
(require "interp-R2.rkt")
(require "interp-R3.rkt")
(require "interp.rkt")
(require "compiler.rkt")
;; (debug-level 0)
(debug-level 1)
;; (debug-level 4)

;; Define the passes to be used by interp-tests and the grader
;; Note that your compiler file (or whatever file provides your passes)
;; should be named "compiler.rkt"
(define r1-passes
  `( ("uniquify" ,(uniquify '()) ,(interp-R3 '()))
     ("flatten" ,flatten ,interp-C)
     ("instruction selection" ,select-instructions ,interp-x86)
     ("assign homes" ,(assign-homes (void)) ,interp-x86)
     ("insert spill code" ,patch-instructions ,interp-x86)
     ("print x86" ,print-x86 #f)
     ))
#;(define r1a-passes
  `( ("uniquify" ,(uniquify '()) ,(interp-R3 '()))
     ("flatten" ,flatten ,interp-C)
     ("instruction selection" ,select-instructions ,interp-x86)
     ("uncover live" ,uncover-live ,interp-x86)
     ("build interference" ,build-interference ,interp-x86)
     ("allocate registers" ,allocate-registers ,interp-x86)
     ("insert spill code" ,patch-instructions ,interp-x86)
     ("print x86" ,print-x86 #f)
     ))
#;(define r2-passes
  `( ("uniquify" ,(uniquify '()) ,(interp-R3 '()))
     ("flatten" ,flatten ,interp-C)
     ("instruction selection" ,select-instructions ,interp-x86)
     ("uncover live" ,uncover-live ,interp-x86)
     ("build interference" ,build-interference ,interp-x86)
     ("allocate registers" ,allocate-registers ,interp-x86)
     ("lower conditionals" ,lower-conditionals ,interp-x86)
     ("insert spill code" ,patch-instructions ,interp-x86)
     ("print x86" ,print-x86 #f)
     ))
#;(define r3-passes
  `( ("uniquify" ,(uniquify '()) ,(interp-R3 '()))
     ("expose allocation" ,expose-allocation ,interp-scheme)
     ("flatten" ,flatten ,interp-C)
     ("instruction selection" ,select-instructions ,interp-x86)
     ("uncover live" ,uncover-live ,interp-x86)
     ("build interference" ,(build-interference (void)) ,interp-x86)
     ("allocate registers" ,allocate-registers ,interp-x86)
     ("lower conditionals" ,lower-conditionals ,interp-x86)
     ("insert spill code" ,patch-instructions ,interp-x86)
     ("print x86" ,print-x86 #f)
     ))

;(interp-tests "r1" (typecheck-R3 '()) r1-passes (interp-R2 '()) "r1" (tests-for "r1"))
;(interp-tests "r1a" (typecheck-R3 '()) r1a-passes (interp-R2 '()) "r1a" (tests-for "r1a"))
;(interp-tests "r2" (typecheck-R3 '()) r2-passes (interp-R2 '()) "r2" (tests-for "r2"))
;(interp-tests "r3" (typecheck-R3 '()) r3-passes (interp-R3 '()) "r3" (tests-for "r3"))
;(compiler-tests "r1" (typecheck-R3 '()) r1-passes "r1" (tests-for "r1"))
;(compiler-tests "r1a" (typecheck-R3 '()) r1a-passes "r1a" (tests-for "r1a"))
;(compiler-tests "r2" (typecheck-R3 '()) r2-passes "r2" (tests-for "r2"))
;(compiler-tests "r3" (typecheck-R3 '()) r3-passes "r3" (tests-for "r3"))
(newline)(display "tests passed!") (newline)
