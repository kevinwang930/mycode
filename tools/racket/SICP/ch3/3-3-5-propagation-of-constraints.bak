#lang racket


(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a2))
                       me))))
  (define (process-forget-value)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (forget-value! sum me)
    (process-new-value))

  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unkonw request: ADDER" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me
  )

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? m1) (has-value? product))
           (set-value! m2
                       (/ (get-value product) (get-value m1))
                       me))
          ((and (has-value? m2) (has-value? product))
           (set-value! m1
                       (/ (get-value product) (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (forget-value! product me)
    (process-new-value))

  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unkonw request: ADDER" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me
  )

(define (celsius-fahrenheit-converter c f)
  (let ((u (make-connector))
        (v (make-connector))
        (w (make-connector))
        (x (make-connector))
        (y (make-connector)))
    (multiplier c w u)
    (multiplier x v u)
    (adder v y f)
    (constant 9 w)
    (constant 5 x)
    (constant 32 y)
    'ok))

(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))

(define (constant value connector)
  (define (me request)
    (error "Unknown request : constant" request))
  (connect connector me)
  (set-value! connector value me))

;probe is a special constraint
(define (probe name connector)
  (define (print-probe value informant)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value)
    (display " informant ")
    (display informant))
  (define (process-new-value)
    (print-probe (get-value connector)
                 (get-informant connector)))
  (define (process-forget-value)
    (print-probe "?" me))
  (define (me request)
    (cond
      ((eq? request 'I-have-a-value) (process-new-value))
      ((eq? request 'I-lost-my-value) (process-forget-value))
      (else (error "Unknown request: Probe" request))))
  (connect connector me)
  me)

(define (make-connector)
  (let ((value false)
        (informant false)
        (constraints '()))
  (define (set-my-value newval setter)
    (cond
      ((not (has-value? me))
       (set! value newval)
       (set! informant setter)
       (for-each-except setter
                        inform-about-value
                        constraints))
      ((not (= value newval))
       (error "contradiction" (list value newval)))
      (else 'ignored)))
  (define (forget-my-value retractor)
    (if (eq? retractor informant)
        (begin (set! informant false)
               (for-each-except retractor
                                inform-about-no-value
                                constraints))
        'ignored))
  (define (connect new-constraint)
    (when (not (memq new-constraint constraints))
        (set! constraints
              (cons new-constraint constraints)))
    (when (has-value? me)
      (inform-about-value new-constraint))
    'done)
  (define (me request)
    (cond
      ((eq? request 'has-value?)
       (if informant true false))
      ((eq? request 'value) value)
      ((eq? request 'informant) informant)
      ((eq? request 'set-value!) set-my-value)
      ((eq? request 'forget) forget-my-value)
      ((eq? request 'connect) connect)
      (else (error "Unknown operation: connector" request))))
  me))

(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))
(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'value))
(define (get-informant connector)
  (connector 'informant))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))

(define (average a b c)
  (let ((m (make-connector))
        (m1 (make-connector)))
    (adder a b m)
    (multiplier  m1 c m)
    (constant 2 m1)
    'ok))

;(multiplier C F G)
;(celsius-fahrenheit-converter C F)


;constraint structure
;1) connect connector
;2) respond I have value I have no value
;3) implement constraint

(define (squarer a b)
  (define (process-new-value)
    (cond ((has-value? b)
           (let ((value-b (get-value b)))
             (if (< value-b  0)
               (error "square less than 0:squarer" value-b)
               (set-value! a (sqrt value-b) me))))
          ((has-value? a)
           (let ((value-a (get-value a)))
           (set-value! b (* value-a value-a) me)))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me))
  (define (me request)
    (cond
      ((eq? request 'I-have-a-value) (process-new-value))
      ((eq? request 'I-lost-my-value) (process-forget-value))
      (else (error "invalid request"))))
  (connect a me)
  (connect b me)
  (void))
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))
(define (c/ x y)
  (let ((z (make-connector)))
    (multiplier y z x)
    z))
(define (cv x)
  (let ((z (make-connector)))
    (constant x z)
    z))
(define a (make-connector))
(define b (make-connector))
(define c (make-connector))
(define d (make-connector))
(define C (make-connector))
(define F (make-connector))
;(define Z (c+ C F))
(define answer (c* (c+ a b) (c+ c d)))
(define G (make-connector))
;(squarer C F)
(probe "C-out" C)
(probe "b-out" b)
(probe "F-out" F)
;(probe "Z-out" Z)
(probe "answer-out" answer)
;(average C F G)
;(set-value! Z 4 'user)

(set-value! c 2 'test)
(set-value! d 3 'test)
(set-value! a 4 'test)
(set-value! answer 25 'test)

;(set-value! F 2 'TEST)
;(forget-value! C 'user)
